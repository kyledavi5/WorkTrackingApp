@page "/workitemcategories"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using WorkTrackingApp.Data
@using WorkTrackingApp.Data.Models
@using WorkTrackingApp.Services

@attribute [Authorize]

@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService DialogService
@inject WorkItemCategoryService WorkItemCategoryService

<MudText Typo="Typo.h4" GutterBottom="true">Work Item Categories</MudText>
<MudText Class="mb-8">Manage your Work Item Categories here.</MudText>

<MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Outlined.Add" OnClick="OpenCreateDialog" Class="mb-4">New
</MudButton>

<MudDataGrid T="WorkItemCategory" Items="@workItemCategories" ReadOnly="false" EditMode="DataGridEditMode.Form"
    Bordered="true" Dense="true" EditTrigger="DataGridEditTrigger.Manual">
    <Columns>
        <PropertyColumn Property="x => x.Name" Title="Name" />
        <PropertyColumn Property="x => x.Description" Title="Description" />
        <PropertyColumn Property="x => x.IsActive" Title="Is Active" />
        <PropertyColumn Property="x => x.CreatedDateTime" Title="Created Date" />
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => OpenEditDialog(context.Item))" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(() => DeleteWorkItemCategory(context.Item))" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    private IEnumerable<WorkItemCategory> workItemCategories = new List<WorkItemCategory>();

    private string currentUserId;
    protected override async Task OnInitializedAsync()
    {
        await PopulateWorkItemCategories();
    }

    private async Task PopulateWorkItemCategories()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var appUser = await UserManager.GetUserAsync(user);
        currentUserId = await UserManager.GetUserIdAsync(appUser);
        workItemCategories = await WorkItemCategoryService.GetAllActiveByUserIdAsync(currentUserId);
        StateHasChanged();
    }

    private async Task OpenEditDialog(WorkItemCategory item)
    {
        var parameters = new DialogParameters
        {
            ["Category"] = item
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialogReference = await DialogService.ShowAsync<EditWorkItemCategory>("Edit Work Item Category", parameters, options);
        var result = await dialogReference.Result;
        if (result != null && !result.Canceled && result.Data is WorkItemCategory updatedItem)
        {
            await WorkItemCategoryService.UpdateAsync(updatedItem);
            await PopulateWorkItemCategories();
        }
    }

    private async Task OpenCreateDialog()
    {
        var newCategory = new WorkItemCategory();
        newCategory.ApplicationUserId = currentUserId; // Ensure the new category is associated with the current user

        var parameters = new DialogParameters
        {
            ["NewCategory"] = newCategory
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialogReference = await DialogService.ShowAsync<CreateWorkItemCategory>("New Work Item Category", parameters, options);
        var result = await dialogReference.Result;
        if (result != null && !result.Canceled && result.Data is WorkItemCategory createdItem)
        {
            await WorkItemCategoryService.AddAsync(createdItem);
            await PopulateWorkItemCategories();
        }
    }

    private async Task DeleteWorkItemCategory(WorkItemCategory item)
    {
        bool confirmed = await DialogService.ShowMessageBox(
            "Delete Work Item Category",
            $"Are you sure you want to delete \"{item.Name}\"?",
            yesText: "Delete", cancelText: "Cancel", options: new DialogOptions { MaxWidth = MaxWidth.ExtraSmall, FullWidth = true }
        ) == true;

        if (confirmed)
        {
            await WorkItemCategoryService.DeleteAsync(item.Id);
            await PopulateWorkItemCategories();
        }
    }
}